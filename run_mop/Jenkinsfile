import groovy.json.JsonSlurper

def mopData
def json = '''{
  "dev": {
    "hoster": "123",
    "id": "123",
  },
  "stage": {
    "hoster": "123",
    "id": "123",
    "merge": "dev",
    "slackChannel": "#dg-test-deployments"
  },
  "master": {
    "hoster": "123",
    "id": "123",
    "merge": "stage",
  },
  "updates": {
    "hoster": "123",
    "id": "123",
    "merge": "master",
    "slackChannel": "#dg-test-deployments"
  }
}'''
//def slurped = new JsonSlurper().parseText(json)
pipeline {
    agent any
    stages {
        stage('Setup parameters') {
            steps {
                script {
                    properties([
                        parameters([
                            string( defaultValue: './mops/the-mop.json', name: 'MOP_FILE', trim: true ),
                        ])
                    ])
                }
            }
        }
        stage('Pre-Flight (automate MOP review') {
            steps {
                script {
                    wholeFileData = readFile(file: MOP_FILE)
                    // println(wholeFileData)
                    mopData = new JsonSlurper().parseText(wholeFileData)
                    // println(mopData)
                }
            }
        }
        stage('Approve MOP Step-by-Step') { steps { script { input "Now what?" } } }
    }
}

def runAnsibleAction(String line) {
    println("runAnsibleAction called with  line = ${line}")
    def (ACTION, PATTERN, INVENTORY, LIMIT, MODULE, DASH_A, EXTRA_PARAMS) = line.tokenize('|')
    println("${ACTION}, ${PATTERN}, ${INVENTORY}, ${LIMIT}, ${MODULE}, [${DASH_A}], ${EXTRA_PARAMS}")
    build job: 'run_ansible', propagate: true, wait: true, parameters: [
        [$class: 'StringParameterValue', name: 'PATTERN', value: PATTERN],
        [$class: 'StringParameterValue', name: 'INVENTORY', value: INVENTORY],
        [$class: 'StringParameterValue', name: 'LIMIT', value: LIMIT],
        [$class: 'StringParameterValue', name: 'MODULE', value: MODULE],
        [$class: 'StringParameterValue', name: 'DASH_A', value: DASH_A],
        [$class: 'StringParameterValue', name: 'EXTRA_PARAMS', value: EXTRA_PARAMS]]
}

def checkLog() {

    def logFile = input(
        id: 'userInput', message: 'Enter log filename :?',
        parameters: [
            string(defaultValue: 'None',
                description: 'Log file to check.',
                name: 'logFile'), ]
    )
    println("Check log file ${logFile}")
    build job: 'run_chklog', propagate: true, wait: true, parameters: [
        [$class: 'StringParameterValue', name: 'LOGFILE', value: logFile]]
}